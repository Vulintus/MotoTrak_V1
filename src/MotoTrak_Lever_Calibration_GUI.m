function handles = MotoTrak_Lever_Calibration_GUI(mode)

%
%MotoTrak_Lever_Calibration_GUI.m - Vulintus, Inc.
%
%   MotoTrak_Lever_Calibration_GUI creates a GUI for calibrating the 
%   MotoTrak lever press module.
%   
%   UPDATE LOG:
%   01/04/2019 - Drew Sloan - Function first created.
%

%Set the common properties of subsequent uicontrols.
fontsize = 14;                                                              %Set the fontsize for all uicontrols.
ui_h = 0.9;                                                                 %Set the height of all editboxes and listboxes, in centimeters.
sp = 0.1;                                                                   %Set the spacing between elements, in centimeters.
label_color = [0.7 0.7 0.9];                                                %Set the color for all labels.

%Create the main figure.
w = 20;                                                                     %Set the figure width, in centimeters.
h = 15;                                                                     %Set the figure height, in centimeters.
set(0,'units','centimeters');                                               %Set the system units to centimeters.
pos = get(0,'screensize');                                                  %Grab the screen size.
fig_pos = [pos(3)/2 - w/2, pos(4)/2 - h/2, w, h];                           %Set the figure position.
handles.mainfig = figure('units','centimeter',...
    'position',fig_pos,...
    'menubar','none',...
    'numbertitle','off',...
    'resize','off',...
    'name','MotoTrak Lever Press Calibration');                             %Set the properties of the main figure.

%Create a panel housing all of the calibration information uicontrols.
w = fig_pos(3) - 2*sp;                                                      %Set the width of the following panel, in centimeters.
h = 4*sp + 2*ui_h;                                                          %Set the height of the following panel, in centimeters.
pos = [sp, fig_pos(4) - h - sp, w, h];                                      %Set the panel position.
p = uipanel(handles.mainfig,'units','centimeters',...
    'position',pos,...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Create the panel to hold the controller infomation uicontrols.
h = fliplr({'editport','editbooth'});                                       %Create the uicontrol handles field names for the controller infomation uicontrols.
l = fliplr({'Port: ','Booth: '});                                           %Create the labels for the uicontrols' string property.
x = sp;                                                                     %Set the left edge of the uicontrols.
w = [0.15, 0.2]*(pos(3) - 3*sp);                                            %Set the width of the following uicontrols.
for i = 1:2                                                                 %Step through the uicontrols.    
    handles.label(i) = uicontrol(p,'style','edit',...
        'enable','inactive',...
        'string',l{i},...
        'units','centimeters',...
        'position',[x, pos(4)-i*(sp+ui_h)-sp, w(1), ui_h],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','right',...
        'backgroundcolor',label_color);                                     %Make a static text label for each uicontrol.
    temp = uicontrol(p,'style','edit',...
        'units','centimeters',...
        'string','-',...
        'position',[x+w(1), pos(4)-i*(sp+ui_h)-sp, w(2), ui_h],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','center',...
        'backgroundcolor','w');                                             %Create an editbox for entering in each parameter.
    handles.(h{i}) = temp;                                                  %Save the uicontrol handle to the specified field in the handles structure.
end
set(handles.editport,'enable','inactive');                                  %Disable the port editbox.
h = fliplr({'editslope','editbaseline'});                                   %Create the uicontrol handles field names for session information uicontrols.
l = fliplr({'Slope: ','Baseline: '});                                       %Create the labels for the uicontrols' string property.
u = fliplr({' degrees/tick',' ticks'});                                     %Create the labels for the units uicontrols' string property.
x = x + sum(w) + sp;                                                        %Set the left edge of the uicontrols.
w = [0.15, 0.3, 0.2]*(pos(3) - 3*sp);                                       %Set the width of the following uicontrols.
for i = 1:2                                                                 %Step through the uicontrols.
    handles.label(end+1) = uicontrol(p,'style','edit',...
        'enable','inactive',...
        'string',l{i},...
        'units','centimeters',...
        'position',[x, pos(4)-i*(sp+ui_h)-sp, w(1), ui_h],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','right',...
        'backgroundcolor',label_color);                                     %Make a static text label for each uicontrol.
    temp = uicontrol(p,'style','edit',...
        'units','centimeters',...
        'string','-',...
        'position',[x+w(1), pos(4)-i*(sp+ui_h)-sp, w(2), ui_h],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','center',...
        'backgroundcolor','w');                                             %Create an editbox for entering in each parameter.
    handles.(h{i}) = temp;                                                  %Save the uicontrol handle to the specified field in the handles structure.
    handles.label(end+1) = uicontrol(p,'style','edit',...
        'enable','inactive',...
        'string',u{i},...
        'units','centimeters',...
        'position',[x+w(1)+w(2), pos(4)-i*(sp+ui_h)-sp, w(3)-sp, ui_h],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','left',...
        'backgroundcolor',label_color);                                     %Make a static text label for each uicontrol.
end

%Create a panel housing axes to show the calibration curve.
w = fig_pos(3) - 2*sp;                                                      %Set the width of the following panel, in centimeters.
h = 0.8*(fig_pos(4) - pos(4) - 4*sp);                                       %Set the height of the following panel, in centimeters.
pos = [sp, fig_pos(4) - pos(4) - 2*sp - h, w, h];                           %Set the panel position.
p = uipanel(handles.mainfig,'units','centimeters',...
    'position',pos,...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Create a panel to hold the calibration axes.
w = w - 3.5*sp;                                                             %Set the width of the following axes, in centimeters.
h = h - 3*sp;                                                               %Set the height of the following axes, in centimeters.
handles.stream_ax = axes('parent',p,...
    'units','centimeters',...
    'position',[sp + 0.07*w, sp + 0.01*h, 0.93*w, 0.98*h],...
    'box','on',...
    'xlim',[0,800],...
    'ylim',[0,800],...
    'fontsize',10);                                                         %Create the calibration curve axes.
ylabel(handles.stream_ax,'Angle (\circ)',...
    'fontsize',10,...
    'fontweight','bold');                                                   %Set the y-axis label for the streaming signal curve.
set(handles.stream_ax,'xtick',[]);                                          %Remove the x-tick labels from the plot.

%Create a panel housing radio buttons to select the lever sweep (rat/mouse).
w = 0.5*(fig_pos(3) - 3*sp);                                                %Set the width of the following panel, in centimeters.
h = pos(2) - 2*sp;                                                          %Set the height of the following panel, in centimeters.
ui_h = (h - 7*sp)/2;                                                        %Set the height for the following radio buttons based on the panel height.
pos = [sp, sp, w, h];                                                       %Set the panel position.
p = uipanel(handles.mainfig,'units','centimeters',...
    'position',pos,...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Create the panel to hold the stream axes.
w = (w - 12*sp);                                                            %Set the width of the radio buttons.
handles.ratradio = uicontrol(p,'style','radiobutton',...
    'string',' Rat Lever (11 degrees)',...
    'units','centimeters',...
    'position',[5*sp, 5*sp + ui_h, w, ui_h],...
    'fontweight','bold',...
    'fontsize',0.9*fontsize,...
    'value',1,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a radio button for selecting the rat model lever.
handles.mouseradio = uicontrol(p,'style','radiobutton',...
    'string',' Mouse Lever (5 degrees)',...
    'units','centimeters',...
    'position',[5*sp, 2*sp, w, ui_h],...
    'fontweight','bold',...
    'fontsize',0.9*fontsize,...
    'value',0,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a radio button for selecting the mouse model lever.
    
%Create buttons for capturing the calibration signal and saving the coefficients.
ui_h = (h - sp)/2;                                                          %Set the height for the following buttons based on the remaining height.
x = 0.5*(fig_pos(3) - 3*sp) + 2*sp;                                         %Set the width of the following panel, in centimeters.
w = 0.5*(fig_pos(3) - 3*sp);                                                %Set the width of the following panel, in centimeters.
handles.savebutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','SAVE CALIBRATION',...
    'units','centimeters',...
    'position',[x, sp, w, ui_h],...
    'fontweight','bold',...
    'fontsize',0.9*fontsize,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a calibration save button. 
if mode == 1                                                                %If the pull calibration was launched from the MotoTrak parent window...
    set(handles.savebutton,'string','SAVE AND EXIT');                       %Change the button text to say "SAVE AND EXIT".
end
handles.recordbutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','MEASURE CALIBRATION',...
    'units','centimeters',...
    'position',[x, 2*sp+ui_h, w, ui_h],...
    'fontweight','bold',...
    'fontsize',0.9*fontsize,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a reset button.