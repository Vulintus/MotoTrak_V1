function handles = MotoTrak_Read_Stages(handles)

%
%MotoTrak_Read_Stages.m - Vulintus, Inc.
%
%   MotoTrak_Read_Stages reads in the stage information for the format
%   (Google Spreadsheet, TSV, or Excel file) specified by the user.
%   
%   UPDATE LOG:
%   09/12/2016 - Drew Sloan - Added default values for optional stage
%       parameters to simplify stage definitions.
%   09/13/2016 - Drew Sloan - Switch out MotoTrak-specific TSV Read/Write
%       functions for generalized versions compatible with OmniTrak.
%   01/09/2017 - Drew Sloan - Added support for ceiling values in stages.
%

global run                                                                  %Create a global run variable.

%List the available column headings with stage structure fieldnames and default values.
params = {  'stage number',                             'number',               'required',         [];...
            'description',                              'description',          'required',         [];...
            'input device',                             'device',               'required',         [];...
            'primary input device',                     'device',               'required',         [];...
            'position',                                 'pos',                  'required',         [];...
            'constraint',                               'const',                'optional',         0;...            
            'hit threshold - type',                     'threshadapt',          'optional',         'static';...
            'hit threshold - minimum',                  'threshmin',            'required',         [];...
            'hit threshold - maximum',                  'threshmax',            'optional',         Inf;...
            'hit threshold - increment',                'threshincr',           'optional',         'special case';...
            'hit threshold - ceiling',                  'ceiling',              'optional',         Inf;... 
            'trial initiation threshold',               'init',                 'required',         [];...
            'threshold units',                          'threshtype',           'optional',         'special case';...
            'ir trial initiation',                      'ir',                   'optional',         'NO';...
            'hit window (s)',                           'hitwin',               'optional',         2;...
            'pre-trial sampling time',                  'pre_trial_sampling',   'optional',         1;...
            'post-trial sampling time',                 'post_trial_sampling',  'optional',         2;...
            'sample period (ms)',                       'period',               'optional',         10;...
            'stimulation',                              'vns',                  'optional',         'OFF';...
            'vns default',                              'vns',                  'optional',         'OFF';...
            'session duration',                         'session_dur',          'optional',         Inf;...
            'force stop',                               'force_stop',           'optional',         'NO'};                                             

switch handles.stage_mode                                                   %Switch among the stage selection modes.
    case 1                                                                  %If stages are being loaded from a local TSV file.
        stage_file = 'MotoTrak_Stages.tsv';                                 %Set the default stage file name.
        file = [handles.mainpath stage_file];                               %Assume the stage file exists in the main program path.
        if ~exist(file,'file');                                             %If the stage file doesn't exist in the main program path...
            file = which(stage_file);                                       %Look through the entire search path for the stage file.    
        end
        if isempty(file)                                                    %If the stage file wasn't found...
            h = warndlg(['The program couldn''t find the stage '...
                'definition file "MotoTrak_Stages.tsv". Press "OK" to '...
                'manually locate the file.'],...
                'NO STAGE FILE');                                           %Show a warning.
            uiwait(h);                                                      %Wait for the warning dialog to close.
            [file, path] = uigetfile('*.tsv','LOCATE STAGE FILE');          %Have the user locate the file with a dialog box.
            if file(1) == 0                                                 %If the user selected "Cancel"...
                run = 0;                                                    %Set the run variable to 0.
                return                                                      %Skip execution of the rest of the function.
            end
            file = [path file];                                             %Add the directory to the located filename.
            temp = questdlg(['The file "' file '" will be copied to "'...
                handles.mainpath '" and will be renamed to '...
                '"MotoTrak_Stages.tsv" for future use.'],...
                'MOVING STAGE FILE','OK','Cancel','OK');                    %Show an OK/Cancel warning that the file will be moved.
            if isempty(temp) || strcmpi(temp,'cancel')                      %If the user closed the warning or pressed "Cancel"...
                run = 0;                                                    %Set the run variable to 0.
                return                                                      %Skip execution of the rest of the function.
            end
            copyfile(file,[handles.mainpath stage_file],'f');               %Copy the stage file to the main data path with the correct filename.
            delete(file);                                                   %Delete the stage file from it's original location.
        end
        stage_file = [handles.mainpath stage_file];                         %Add the main program path to the stage file name.       
        
        data = Vulintus_Read_TSV_File(stage_file);                          %Read in the data from the TSV file.
        
    case 2                                                                  %If stages are being loaded from an online google spreadsheet.
        try                                                                 %Try to read in the stage information from the web.
        	data = Read_Google_Spreadsheet(handles.stage_url);              %Read in the stage information from the Google Docs URL.      
            filename = [handles.mainpath 'Mototrak_Stages.tsv'];            %Set the filename for the stage backup file.
        	Vulintus_Write_TSV_File(data,filename);                         %Back up the stage information to a local TSV file.
        catch err                                                           %If there's an error...
            warning(['Read_Google_Spreadsheet:' err.identifier]',...
                err.message);                                               %Show a warning.
            stage_file = [handles.mainpath 'Mototrak_Stages.tsv'];          %Add the main program path to the stage file name.    
            data = Vulintus_Read_TSV_File(stage_file);                      %Read in the data from the TSV file.
        end
    case 3                                                                  %If stages are being loaded from an Excel spreadsheet.
end

stage = struct([]);                                                         %Create an empty stage structure.
for c = 1:size(data,2)                                                      %Step through each column of the stage information.    
    fname = [];                                                             %Assume, by default, that the column heading won't match any expected field.
    for p = 1:size(params,1)                                                %Step through every recognized parameter.
        if strncmpi(params{p,1},data{1,c},length(params{p,1}))              %If the column heading matches a recognized parameter.
            fname = params{p,2};                                            %Grab the associated field name.
        end
    end
    if isempty(fname)                                                       %If the column heading didn't match any recognized parameter.
        warndlg(['The stage parameters spreadsheet column heading "' ...
            data{1,c} '" doesn''t match any recognized stage parameter.'...
            ' This parameter will be ignored.'],...
            'STAGE PARAMETER NOT RECOGNIZED');                              %Show a warning that the parameter will be ignored.
    else                                                                    %Otherwise...
        for i = 2:size(data,1)                                              %Step through each listed stage.
            temp = data{i,c};                                               %Grab the entry for this stage.
            temp(temp == 39) = [];                                          %Kick out any apostrophes in the entry.
            if any(temp > 59)                                               %If there's any text characters in the entry...
                stage(i-1).(fname) = strtrim(temp);                         %Save the field value as a string.
            else                                                            %Otherwise, if there's no text characters in the entry.
                stage(i-1).(fname) = str2double(temp);                      %Evaluate the entry and save the field value as a number.
            end
        end
        
    end
end

for p = 1:size(params)                                                      %Now step through each parameter.
    if ~isfield(stage,params{p,2})                                          %If the parameter wasn't found in the stage information...
        if strcmpi(params{p,3},'required')                                  %If the parameter was a required parameter...
            errordlg(sprintf(['The required stage parameter "%s" '...
                'wasn''t found in the stage parameters spreadsheet! '...
                'Correct the stage spreadsheet and restart MotoTrak.'],...
                upper(params{p,1})),'MISSING STAGE PARAMETER');             %Show an error dialog.
            delete(handles.ardy.serialcon);                                 %Close the serial connection with the Arduino.
            close(handles.mainfig);                                         %Close the GUI.
            clear('run');                                                   %Clear the global run variable from the workspace.
            error(['ERROR IN MOTOTRAK_READ_STAGES: Required stage '...
                'parameter "' upper(params{p,1}) '" wasn''t found in '...
                ' the stage parameters spreadsheet!']);                     %Throw an error.
        else                                                                %Otherwise, if the parameter was an optional parameter...
            stage(1).(params{p,2}) = [];                                    %Add the parameter as a new field.
        end
    end
end

for p = 1:size(params)                                                      %Now step through each parameter.
    for i = 1:length(stage)                                                 %Step through each stage...
        if isempty(stage(i).(params{p,2})) && ~isempty(params{p,4})         %If no parameter value was specified and a default value exists...
            if strcmpi(params{p,4},'special case')                          %If the parameter default value is a special (i.e. conditional) case...
                switch params{p,2}                                          %Switch between the special case parameters.
                    case 'threshtype'                                       %If the parameter is the Threshold Units...
                        switch stage(i).device                              %Switch between the device types.
                            case 'pull'                                     %For the pull device...
                                stage(i).threshtype = 'grams (peak)';       %Set the default threshold units to peak force.
                            case 'squeeze'                                  %For the squeeze device...
                                stage(i).threshtype = 'grams (max)';        %Set the default threshold units to maximum force.
                            case 'knob'                                     %For the knob device...
                                stage(i).threshtype = 'degrees (total)';    %Set the default threshold units to total degrees.
                            case 'lever'                                    %For the lever device...
                                stage(i).threshtype = 'degrees (total)';    %Set the default threshold units to total degrees.
                            case 'touch'                                    %For the touch sensor...
                                stage(i).threshtype = ...
                                    'milliseconds (hold)';                  %Set the default threshold units to milliseconds holding.
                            case 'both'                                     %For the combined touch/pull device...
                                stage(i).threshtype = 'milliseconds/grams'; %Set the default threshold units to milliseconds holding and peak force.
                        end
                    case 'threshincr'                                       %If the parameter is the Hit Threshold Increment...
                        switch stage(i).threshadapt                         %Switch between the adaptation types.
                            case {'median','50th percentile'}               %For median adaptation...
                                stage(i).threshincr = 20;                   %Set the increment (number of trials to integrate over) to 20.
                            case 'linear'                                   %For linear adaptation...
                                stage(i).threshincr = 0.5;                  %Set the increment (number of units to increase per trial to integrate over) to 0.5.
                        end                        
                end
            else                                                            %Otherwise...
                stage(i).(params{p,2}) = params{p,4};                       %Set the parameter to the default value for this stage.
            end
        end
    end
end

for i = 1:length(stage)                                                     %Step through the stages.    
    stage(i).description = ...
        [stage(i).number ': ' stage(i).description];                        %Add the stage number to the stage description.
    if ~ischar(stage(i).const)                                              %If the listed constraint isn't a character.
        stage(i).const = ['#' num2str(stage(i).const)];                     %Turn the constraint number into a string.
    elseif ~any(stage(i).const == '#') && ...
            ~strcmpi(stage(i).const,'none')                                 %Otherwise, if there's no # sign preceding the constraint number...
        stage(i).const = ['#' stage(i).const];                              %Add a # sign preceding the constraint number.
    end
    if strcmpi(stage(i).const,'#0')                                         %If the listed constraint value is '#0'...
        stage(i).const = 'None';                                            %Set the constraint value to 'None'.
    end
    if stage(i).threshmin < stage(i).init && ...
            ~strcmpi(handles.custom,'machado lab')                          %If the initiation threshold is larger than the minimum hit threshold...
        stage(i).threshmin = stage(i).init;                                 %Set the minimum hit threshold to the initiation threshold.
    end
    if isfield(stage,'ir')                                                  %If an IR trial initiation mode was specified.
        stage(i).ir = strcmpi(stage(i).ir,'YES');                           %Convert the IR trial initiation mode to a binary value.
    end
    if ischar(stage(i).ceiling)                                             %If the threshold ceiling value is a string...
        stage(i).ceiling = NaN;                                             %Set the ceiling value to NaN.
    end
end
            
handles.stage = stage;                                                      %Save the stage structure as a field in the handles structure.