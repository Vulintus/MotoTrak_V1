function handles = MotoTrak_Read_Stages(handles)

global run                                                                  %Create a global run variable.

switch handles.stage_mode                                                   %Switch among the stage selection modes.
    case 1                                                                  %If stages are being loaded from a local TSV file.
        stage_file = 'MotoTrak_Stages.tsv';                                 %Set the default stage file name.
        file = [handles.mainpath stage_file];                               %Assume the stage file exists in the main program path.
        if ~exist(file,'file');                                             %If the stage file doesn't exist in the main program path...
            file = which(stage_file);                                       %Look through the entire search path for the stage file.    
        end
        if isempty(file)                                                    %If the stage file wasn't found...
            h = warndlg(['The program couldn''t find the stage '...
                'definition file "MotoTrak_Stages.tsv". Press "OK" to '...
                'manually locate the file.'],...
                'NO STAGE FILE');                                           %Show a warning.
            uiwait(h);                                                      %Wait for the warning dialog to close.
            [file, path] = uigetfile('*.tsv','LOCATE STAGE FILE');          %Have the user locate the file with a dialog box.
            if file(1) == 0                                                 %If the user selected "Cancel"...
                run = -1;                                                   %Set the run variable to -1.
                return                                                      %Skip execution of the rest of the function.
            end
            file = [path file];                                             %Add the directory to the located filename.
            temp = questdlg(['The file "' file '" will be copied to "'...
                handles.mainpath '" and will be renamed to '...
                '"MotoTrak_Stages.tsv" for future use.'],...
                'MOVING STAGE FILE','OK','Cancel','OK');                    %Show an OK/Cancel warning that the file will be moved.
            if isempty(temp) || strcmpi(temp,'cancel')                      %If the user closed the warning or pressed "Cancel"...
                run = -1;                                                   %Set the run variable to -1.
                return                                                      %Skip execution of the rest of the function.
            end
            copyfile(file,[handles.mainpath stage_file],'f');               %Copy the stage file to the main data path with the correct filename.
            delete(file);                                                   %Delete the stage file from it's original location.
        end
        stage_file = [handles.mainpath stage_file];                         %Add the main program path to the stage file name.       
        
        [fid, errmsg] = fopen(stage_file,'rt');                             %Open the stage configuration file saved previously for reading as text.
        if fid == -1                                                        %If the file could not be opened...
            warndlg(sprintf(['Could not open the stage file '...
                'in:\n\n%s\n\nError:\n\n%s'],stage_file,...
                errmsg),'MotoTrak File Read Error');                        %Show a warning.
        end
        txt = fread(fid,'*char')';                                                  %Read in the file data as text.
        fclose(fid);                                                                %Close the configuration file.
        tab = sprintf('\t');                                                        %Make a tab string for finding delimiters.
        newline = sprintf('\n');                                                    %Make a new-line string for finding new lines.
        a = find(txt == tab | txt == newline);                                      %Find all delimiters in the string.
        a = [0, a, length(txt)+1];                                                  %Add indices for the first and last elements of the string.
        txt = [txt, newline];                                                       %Add a new line to the end of the string to avoid confusing the spreadsheet-reading loop.
        column = 1;                                                                 %Count across columns.
        row = 1;                                                                    %Count down rows.
        txtdata = {};                                                               %Make a cell array to hold the spreadsheet-formated data.
        for i = 2:length(a)                                                         %Step through each entry in the string.
            if a(i) == a(i-1)+1                                                     %If there is no entry for this cell...
                txtdata{row,column} = [];                                           %...assign an empty matrix.
            else                                                                    %Otherwise...
                txtdata{row,column} = txt((a(i-1)+1):(a(i)-1));                     %...read one entry from the string.
            end
            if txt(a(i)) == tab                                                     %If the delimiter was a tab or a comma...
                column = column + 1;                                                %...advance the column count.
            else                                                                    %Otherwise, if the delimiter was a new-line...
                column = 1;                                                         %...reset the column count to 1...
                row = row + 1;                                                      %...and add one to the row count.
            end
        end
        fields = {'stage number','number';...
            'description','description';...
            'input device','device';...
            'constraint','const';...
            'position','pos';...
            'hit threshold - type','threshadapt';...
            'hit threshold - minimum','threshmin';...
            'hit threshold - maximum','threshmax';...
            'hit threshold - increment','threshincr';...
            'trial initiation threshold','init';...
            'threshold units','threshtype';...
            'hit window (s)','hitwin';...
            'sample period (ms)','period';...
            'vns default','vns'};                                                   %List the column headings with their associated stage structure fields.
        for i = 1:size(txtdata,1)                                                   %Step through the rows of txtdata.
            for j = 1:size(txtdata,2)                                               %Step through the columns of txtdata.
                if ~isempty(txtdata{i,j}) && ...
                        (txtdata{i,j}(1) == '"' || txtdata{i,j}(end) == '"')        %If the line either starts or ends in quotation marks...
                    a = find(txtdata{i,j} ~= '"',1,'first');                        %Find the first non-quotation mark character.
                    b = find(txtdata{i,j} ~= '"',1,'last');                         %Find the last non-quotation mark character.
                    txtdata{i,j} = txtdata{i,j}(a:b);                               %Kick out the preceding and following quotation marks.
                end
            end
        end
        for c = 1:size(fields,1)                                                    %Step through each column heading.
            a = strncmpi(fields{c,1},txtdata(1,:),length(fields{c,1}));             %Find the column index for this column heading.
            for i = 2:size(txtdata,1)                                               %Step through each listed stage.
                temp = txtdata{i,a};                                                %Grab the entry for this stage.
                temp(temp == 39) = [];                                              %Kick out any apostrophes in the entry.
                if any(temp > 59)                                                   %If there's any text characters in the entry...
                    stage(i-1).(fields{c,2}) = temp;                                %Save the field value as a string.
                else                                                                %Otherwise, if there's no text characters in the entry.
                    stage(i-1).(fields{c,2}) = str2double(temp);                    %Evaluate the entry and save the field value as a number.
                end
            end
        end
        for i = 1:length(stage)                                                     %Step through the stages.
            stage(i).description = [stage(i).number ': ' stage(i).description];     %Add the stage number to the stage description.
            if ~ischar(stage(i).const)                                              %If the listed constraint isn't a character.
                stage(i).const = ['#' num2str(stage(i).const)];                     %Turn the constraint number into a string.
            elseif ~any(stage(i).const == '#') && ~strcmpi(stage(i).const,'none')   %Otherwise, if there's no # sign preceding the constraint number...
                stage(i).const = ['#' stage(i).const];                              %Add a # sign preceding the constraint number.
            end
            if strcmpi(stage(i).const,'#0')                                         %If the listed constraint value is '#0'...
                stage(i).const = 'None';                                            %Set the constraint value to 'None'.
            end
            if stage(i).threshmin < stage(i).init                                  %If the initiation threshold is larger than the minimum hit threshold...
                stage(i).threshmin = stage(i).init;                                 %Set the minimum hit threshold to the initiation threshold.
            end
        end
        
    case 2                                                                  %If stages are being loaded from an online google spreadsheet.
        try                                                                 %Try to read in the stage information from the web.
            urldata = Read_Google_Spreadsheet(handles.stage_url);           %Read in the stage information from the Google Docs URL.            
            [fid, errmsg] = ...
                fopen([handles.mainpath 'Mototrak_Stages.tsv'],'wt');       %Open a text-formatted configuration file to save the stage information.
            if fid == -1                                                    %If a file could not be created...
                warndlg(sprintf(['Could not create stage file backup '...
                    'in:\n\n%s\n\nError:\n\n%s'],handles.mainpath,...
                    errmsg),'MotoTrak File Write Error');                   %Show a warning.
            end
            for i = 1:size(urldata,1)                                       %Step through the rows of the stage data.
                for j = 1:size(urldata,2)                                   %Step through the columns of the stage data.
                    urldata{i,j}(urldata{i,j} < 32) = [];                   %Kick out all special characters.
                    fprintf(fid,'%s',urldata{i,j});                         %Write each element of the stage data as tab-separated values.
                    if j < size(urldata,2)                                  %If this isn't the end of a row...
                        fprintf(fid,'\t');                                  %Write a tab to the file.
                    elseif i < size(urldata,1)                              %Otherwise, if this isn't the last row...
                        fprintf(fid,'\n');                                  %Write a carriage return to the file.
                    end
                end
            end
            fclose(fid);                                                    %Close the stages TSV file.    
        catch err                                                           %If there's an error...
            warning(['Read_Google_Spreadsheet:' err.identifier]',...
                err.message);                                               %Show a warning.
            [fid, errmsg] = ...
                fopen([handles.mainpath 'Mototrak_Stages.tsv'],'rt');       %Open the stage configuration file saved previously for reading as text.
            if fid == -1                                                    %If a file could not be created...
                warndlg(sprintf(['Could not open stage file backup '...
                    'in:\n\n%s\n\nError:\n\n%s'],handles.mainpath,...
                    errmsg),'MotoTrak File Read Error');                    %Show a warning.
            end
            txt = fread(fid,'*char')';                                      %Read in the file data as text.
            fclose(fid);                                                    %Close the configuration file.
            tab = sprintf('\t');                                            %Make a tab string for finding delimiters.
            newline = sprintf('\n');                                        %Make a new-line string for finding new lines.
            a = find(txt == tab | txt == newline);                          %Find all delimiters in the string.
            a = [0, a, length(txt)+1];                                      %Add indices for the first and last elements of the string.
            txt = [txt, newline];                                           %Add a new line to the end of the string to avoid confusing the spreadsheet-reading loop.
            column = 1;                                                     %Count across columns.
            row = 1;                                                        %Count down rows.
            urldata = {};                                                   %Make a cell array to hold the spreadsheet-formated data.
            for i = 2:length(a)                                             %Step through each entry in the string.
                if a(i) == a(i-1)+1                                         %If there is no entry for this cell...
                    urldata{row,column} = [];                               %...assign an empty matrix.
                else                                                        %Otherwise...
                    urldata{row,column} = txt((a(i-1)+1):(a(i)-1));         %...read one entry from the string.
                end
                if txt(a(i)) == tab                                         %If the delimiter was a tab...
                    column = column + 1;                                    %...advance the column count.
                else                                                        %Otherwise, if the delimiter was a new-line...
                    column = 1;                                             %...reset the column count to 1...
                    row = row + 1;                                          %...and add one to the row count.
                end
            end
        end
        fields = {'stage number','number';...
            'description','description';...
            'input device','device';...
            'primary input device','device';...
            'constraint','const';...
            'position','pos';...
            
            'hit threshold - type','threshadapt';...
            'hit threshold - minimum','threshmin';...
            'hit threshold - maximum','threshmax';...
            'hit threshold - increment','threshincr';... 
            'trial initiation threshold','init';...
            
            'threshold units','threshtype';...
            
            'ir trial initiation','ir';...
            
            'hit window (s)','hitwin';...
            'sample period (ms)','period';...
            'vns default','vns'};                                           %List the column headings with their associated stage structure fields.
        for c = 1:size(fields,1)                                            %Step through each column heading.
            a = strncmpi(fields{c,1},urldata(1,:),length(fields{c,1}));     %Find the column index for this column heading.
            if any(a)                                                       %If no column heading match was found.
                for i = 2:size(urldata,1)                                   %Step through each listed stage.
                    temp = urldata{i,a};                                    %Grab the entry for this stage.
                    temp(temp == 39) = [];                                  %Kick out any apostrophes in the entry.
                    if any(temp > 59)                                       %If there's any text characters in the entry...
                        stage(i-1).(fields{c,2}) = strtrim(temp);           %Save the field value as a string.
                    else                                                    %Otherwise, if there's no text characters in the entry.
                        stage(i-1).(fields{c,2}) = str2double(temp);        %Evaluate the entry and save the field value as a number.
                    end
                end
            else                                                            %Otherwise...
            end
        end
        for i = 1:length(stage)                                             %Step through the stages.
            stage(i).description = ...
                [stage(i).number ': ' stage(i).description];                %Add the stage number to the stage description.
            if ~ischar(stage(i).const)                                      %If the listed constraint isn't a character.
                stage(i).const = ['#' num2str(stage(i).const)];             %Turn the constraint number into a string.
            elseif ~any(stage(i).const == '#') && ...
                    ~strcmpi(stage(i).const,'none')                         %Otherwise, if there's no # sign preceding the constraint number...
                stage(i).const = ['#' stage(i).const];                      %Add a # sign preceding the constraint number.
            end
            if strcmpi(stage(i).const,'#0')                                 %If the listed constraint value is '#0'...
                stage(i).const = 'None';                                    %Set the constraint value to 'None'.
            end
            if isfield(stage,'threshmin') && ...
                    stage(i).threshmin < stage(i).init && ...
                    ~strcmpi(handles.custom,'machado lab')                  %If the initiation threshold is larger than the minimum hit threshold...
                stage(i).threshmin = stage(i).init;                         %Set the minimum hit threshold to the initiation threshold.
            end
            if isfield(stage,'ir')                                          %If an IR trial initiation mode was specified.
                stage(i).ir = strcmpi(stage(i).ir,'YES');                   %Convert the IR trial initiation mode to a binary value.
            end
        end
    case 3                                                                  %If stages are being loaded from an Excel spreadsheet.
end

handles.stage = stage;                                                      %Save the stage structure as a field in the handles structure.