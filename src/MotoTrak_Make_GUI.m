function handles = MotoTrak_Make_GUI(handles)

%
%MotoTrak_Make_GUI.m - Vulintus, Inc.
%
%   This function starts or stops a MotoTrak Behavioral session when the
%   user presses the "START"/"STOP" button on the MotoTrak GUI.
%   
%   UPDATE LOG:
%   09/09/2016 - Drew Sloan - Created a menubar across the top of the
%       figure to display stage definition, calibration,
%       preference-setting, and help functions.
%   09/13/2016 - Drew Sloan - Renamed the preferences menu handles
%       structure field to "pref".
%   10/13/2016 - Drew Sloan - Soft-coded the version number displayed on
%       the figure so it can be set from the top of the startup function.
%   10/27/2016 - Drew Sloan - Changed the axes panel to a tab group.
%   01/09/2017 - Drew Sloan - Added a section at the end to normalize units
%       for all figure objects to fix bugs with the figure resize function.
%

%% Set the common properties of subsequent uicontrols.
fontsize = 12;                                                              %Set the fontsize for all uicontrols.
uheight = 0.75;                                                             %Set the height of all editboxes and listboxes, in centimeters
label_color = [0.7 0.7 0.9];                                                %Set the color for all labels.

%% Create the main figure.
set(0,'units','centimeters');                                               %Set the system units to centimeters.
pos = get(0,'ScreenSize');                                                  %Grab the system screen size.
w = 15;                                                                     %Set the initial GUI width, in centimeters.
h = 12;                                                                     %Set the initial GUI height, in centimeters.
if isfield(handles,'variant')                                               %If this is a custom variant...
    temp = sprintf('MotoTrak %1.2f (%s)',handles.version,handles.variant);  %Create a string showing the MotoTrak version number and the variant.
else                                                                        %If this is just the default variant...
    temp = sprintf('MotoTrak %1.2f',handles.version);                       %Create a string showing the MotoTrak version number.
end
handles.mainfig = figure('units','centimeter',...
    'Position',[pos(3)/2-w/2, pos(4)/2-h/2, w, h],...
    'MenuBar','none',...
    'numbertitle','off',...
    'resize','off',...
    'name',temp);                                                           %Create the main figure.

%% Reset any handles already existing in the structure.
handles.label = [];                                                         %Reset the handles for the labels.

%% Create a stages menu at the top of the figure.
handles.menu.stages.h = uimenu(handles.mainfig,'label','Stages');           %Create a stages menu at the top of the MotoTrak figure.
handles.menu.stages.set_load_option = uimenu(handles.menu.stages.h,...
    'label','Load Stages from...',...
    'enable','off');                                                        %Create a submenu option for setting the preferred stage-loading option.
handles.menu.stages.google = uimenu(handles.menu.stages.set_load_option,...
    'label','Google Spreadsheet',...
    'checked','on');                                                        %Create a submenu option for loading from a Google Spreadsheet.
handles.menu.stages.tsv = uimenu(handles.menu.stages.set_load_option,...
    'label','Local TSV File',...
    'checked','off',...
    'Enable','off');                                                        %Create a submenu option for loading from a Local TSV file.
handles.menu.stages.view_spreadsheet = uimenu(handles.menu.stages.h,...
    'label','View Spreadsheet in Browser...',...
    'enable','off',...
    'separator','on');                                                      %Create a submenu option for opening the stages spreadsheet.
handles.menu.stages.set_spreadsheet = uimenu(handles.menu.stages.h,...
    'label','Set Spreadsheet URL...',...
    'enable','off');                                                        %Create a submenu option for setting the stages spreadsheet URL.
handles.menu.stages.reload_spreadsheet = uimenu(handles.menu.stages.h,...
    'label','Reload Spreadsheet',...
    'enable','off');                                                        %Create a submenu option for reloading the stages spreadsheet.
handles.menu.stages.set_tsv = uimenu(handles.menu.stages.h,...
    'label','Set Local TSV File...',...
    'enable','off',...
    'separator','on');                                                      %Create a submenu option for setting the local TSV file.

%% Create a calibration menu at the top of the figure.
handles.menu.cal.h = uimenu(handles.mainfig,'label','Calibration');         %Create a calibration menu at the top of the MotoTrak figure.
handles.menu.cal.reset_baseline = uimenu(handles.menu.cal.h,...
    'label','Reset Baseline',...
    'enable','off');                                                        %Create a submenu option for resetting the baseline.
handles.menu.cal.open_calibration = uimenu(handles.menu.cal.h,...
    'label','Open Calibration...',...
    'enable','off');                                                        %Create a submenu option for opening the calibration window.

%% Create a preferences menu at the top of the figure.
handles.menu.pref.h = uimenu(handles.mainfig,'label','Preferences');        %Create a preferences menu at the top of the MotoTrak figure.
handles.menu.pref.set_datapath = uimenu(handles.menu.pref.h,...
    'label','Data Directory',...
    'enable','off');                                                        %Create a submenu option for setting the target data directory.
handles.menu.pref.err_report = uimenu(handles.menu.pref.h,...
    'label','Automatic Error Reporting',...
    'enable','on',...
    'separator','on');                                                      %Create a submenu option for tuning Automatic Error Reporting on/off.
handles.menu.pref.err_report_on = ...
    uimenu(handles.menu.pref.err_report,...
    'label','On',...
    'enable','on',...
    'checked','on');                                                        %Create a sub-submenu option for tuning Automatic Error Reporting on.
handles.menu.pref.err_report_off = ...
    uimenu(handles.menu.pref.err_report,...
    'label','Off',...
    'enable','on',...
    'checked','off');                                                       %Create a sub-submenu option for tuning Automatic Error Reporting on.
handles.menu.pref.error_reports = uimenu(handles.menu.pref.h,...
    'label','View Error Reports',...
    'enable','on');                                                         %Create a submenu option for opening the error reports directory.
handles.menu.pref.config_dir = uimenu(handles.menu.pref.h,...
    'label','Configuration Files...',...
    'enable','on',...
    'separator','on');                                                      %Create a submenu option for opening the configuration files directory.

%% Create a help menu at the top of the figure.
handles.menu.help.h = uimenu(handles.mainfig,'label','Help');               %Create a preferences menu at the top of the MotoTrak figure.
handles.menu.help.setup_guide = uimenu(handles.menu.help.h,...
    'label','Hardware Setup Guide',...
    'enable','off');                                                        %Create a submenu option for opening the hardware setup guide.
handles.menu.help.calibration_guide = uimenu(handles.menu.help.h,...
    'label','Calibration Guide',...
    'enable','off');                                                        %Create a submenu option for opening the calibration guide.
        
%% Create a panel housing all of the session information uicontrols.
p = uipanel(handles.mainfig,'units','centimeters',...
    'position',[0.1, 7.75, 14.8, 4.15],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Create the panel to hold the session information uicontrols.
h = fliplr({'editrat','editport','editbooth','popdevice','popvns'});        %Create the uicontrol handles field names for session information uicontrols
l = fliplr({'Subject:','Port:','Booth:','Device:','Stim.:'});               %Create the labels for the uicontrols' string property.
for i = 1:5                                                                 %Step through the uicontrols.
    handles.label(i) = uicontrol(p,'style','edit',...
        'enable','inactive',...
        'string',l{i},...
        'units','centimeters',...
        'position',[0.05, 0.05*i+uheight*(i-1), 2, uheight],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','right',...
        'backgroundcolor',label_color);                                     %Make a static text label for each uicontrol.
    temp = uicontrol(p,'style','edit',...
        'units','centimeters',...
        'string','-',...
        'position',[2.05, 0.05*i+uheight*(i-1), 3, uheight],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','center',...
        'backgroundcolor','w');                                             %Create an editbox for entering in each parameter.
    handles.(h{i}) = temp;                                                  %Save the uicontrol handle to the specified field in the handles structure.
end
set(handles.editport,'enable','inactive');                                  %Disable the port editbox.
set(handles.popdevice,'style','popup');                                     %Make the device uicontrol a popup menu.
set(handles.popvns,'style','popup',...
    'string',{'ON','OFF'},...
    'value',2);                                                             %Make the VNS uicontrol a popup menu.
h = fliplr({'popconst','popstage','editpos','edithitwin','editthresh',...
    'editinit'});                                                           %Create the uicontrol handles field names for session information uicontrols
l = fliplr({'Constraint:','Stage:','Position:','Hit Window:',...
    'Hit Thresh.:','Init. Thresh.:'});                                      %Create the labels for the uicontrols' string property.
u = fliplr({'cm','seconds','units','units'});                               %Create the labels for the units uicontrols' string property.
a = zeros(1,3);                                                             %Make a matrix to hold the uicontrol handles for the units uicontrols.
for i = 1:6                                                                 %Step through the uicontrols.
    temp = uicontrol(p,'style','edit',...
        'enable','inactive',...
        'string',l{i},...
        'units','centimeters',...
        'position',[5.15, 0.05*i+uheight*(i-1), 2.75, uheight],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','right',...
        'backgroundcolor',label_color);                                     %Make a static text label for each uicontrol.
    if i == 4                                                               %If the label is the the position uicontrol label...
        set(temp,'position',[5.15,0.05*i+uheight*(i-1),2,uheight]);         %Shorten the position uicontrol label.
    elseif i == 5                                                           %If the label is the the stage uicontrol label...
        set(temp,'position',[5.15,0.05*i+uheight*(i-1),1.5,uheight]);       %Shorten the stage uicontrol label.
    elseif i == 6                                                           %If the label is the the constraint uicontrol label...
        set(temp,'position',[9.5,0.05*(i-2)+uheight*(i-3),2.5,uheight]);    %Shorten the constraint uicontrol label.
    end
    handles.label(end+1) = temp;                                            %Save the label uicontrol handle.
    temp = uicontrol(p,'style','edit',...
        'units','centimeters',...
        'string','-',...
        'position',[7.9, 0.05*i+uheight*(i-1), 3, uheight],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','center',...
        'backgroundcolor','w');                                             %Create an editbox for entering in each parameter.
    handles.(h{i}) = temp;                                                  %Save the uicontrol handle to the specified field in the handles structure.
    if i == 5                                                               %If the label is the the stage uicontrol label...
        set(temp,'style','popup',...
            'position',[6.65, 0.05*i+uheight*(i-1), 8, uheight]);           %Make the stage uicontrol a popup menu and resize it.
    elseif i == 6                                                           %If the label is the the constraint uicontrol label...
        set(temp,'style','popup',...
            'position',[12, 0.05*(i-2)+uheight*(i-3), 2.65, uheight]);      %Make the stage uicontrol a popup menu and resize it.
    else                                                                    %Otherwise...
        a(i) = uicontrol(p,'style','edit',...
        'enable','inactive',...
        'string',u{i},...
        'units','centimeters',...
        'position',[10.9, 0.05*i+uheight*(i-1), 3.75, uheight],...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'horizontalalignment','left',...
        'backgroundcolor',label_color);                                     %Make a static text label for each uicontrol.
        handles.label(end+1) = a(i);                                        %Save the label uicontrol handle.
        if i == 4                                                           %If the units label for the position was just created.
        	set(temp,'position',[7.15,0.05*i+uheight*(i-1),1.5,uheight]);   %Resize the position editbox.
            set(handles.label(end),'position',...
                [8.65, 0.05*i+uheight*(i-1), 0.75, uheight]);               %Resize the position editbox.
        end
    end
end
handles.lblinit = a(1);                                                     %Save the handle for the initiation threshold units uicontrol.
handles.popunits = a(2);                                                    %Save the handle for the hit threshold units uicontrol.
set(handles.popunits,'style','popup','enable','on');                        %Make the threshold units uicontrol a popup menu and enable it.

%% Create a tab group housing axes for displaying streaming data and trial results.
handles.plot_tab_grp = uitabgroup('parent',handles.mainfig,...
    'units','centimeters',...
    'position',[0.1, 2.65, 14.8, 5]);                                       %Create a tab group to hold the different types of plots.
handles.primary_tab = uitab('parent',handles.plot_tab_grp,...
    'title','Primary Signal',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Create a tab for the primary streaming signal.
handles.primary_ax = axes('parent',handles.primary_tab,...
    'units','normalized',...
    'position',[0 0 1 1],...
    'box','on',...
    'xtick',[],...
    'ytick',[]);                                                            %Create the primary streaming data axes.
handles.secondary_tab = uitab('parent',handles.plot_tab_grp,...
    'title','Secondary Signal',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Create a tab for the secondary streaming signal.
handles.secondary_ax = axes('parent',handles.secondary_tab,...
    'units','normalized',...
    'position',[0 0 1 1],...
    'box','on',...
    'xtick',[],...
    'ytick',[]);                                                            %Create the secondary streaming data axes.

%% Create pushbuttons for starting, stopping, pausing, and manually triggering feedings.
handles.feedbutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','FEED',...
    'units','centimeters',...
    'position',[0.1, 0.1, 3, 0.8],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','right',...
    'foregroundcolor','k',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a manual feeding pushbutton.
handles.pausebutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','PAUSE',...
    'units','centimeters',...
    'position',[0.1, 0.925, 3, 0.8],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','right',...
    'foregroundcolor',[0 0 0.5],...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a pause pushbutton.
handles.startbutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','START',...
    'units','centimeters',...
    'position',[0.1, 1.75, 3, 0.8],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','right',...
    'foregroundcolor',[0 0.5 0],...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a start/stop pushbutton.
    
%% Create a message box to show the user messages about odor presentation.
handles.msgbox = uicontrol(handles.mainfig,'style','listbox',...
    'enable','inactive',...
    'string',{},...
    'units','centimeters',...
    'position',[3.2, 0.1, 11.6, 2.45],...
    'fontweight','bold',...
    'fontsize',10,...
    'min',0,...
    'max',2,...
    'value',[],...
    'backgroundcolor','w');                                                 %Make a listbox for displaying messages to the user.

%% Set the units for all children of the main figure to "normalized".
objs = get(handles.mainfig,'children');                                     %Grab the handles for all children of the main figure.
checker = ones(1,numel(objs));                                              %Create a checker variable to control the following loop.
while any(checker == 1)                                                     %Loop until no new children are found.
    for i = 1:numel(objs)                                                   %Step through each object.
        if isempty(get(objs(i),'children'))                                 %If the object doesn't have any children.
            checker(i) = 0;                                                 %Set the checker variable entry for this object to 0.
        end
    end
    if any(checker == 1)                                                    %If any objects were found to have children...
        temp = get(objs(checker == 1),'children');                          %Grab the handles of the newly-identified children.
        objs = vertcat(objs,temp{:});                                       %Add the new children to the objects handles list.
        checker(:) = 0;                                                     %Set all existing checker variable entries to zero.
        checker(end+1:numel(objs)) = 1;                                     %Add new entries to the checker variable for the new children.
    end
end
type = get(objs,'type');                                                    %Grab the type of each object.
objs(strcmpi(type,'uimenu')) = [];                                          %Kick out all uimenu items.
set(objs,'units','normalized');                                             %Set all units to normalized.
