function trial = MotoTrak_Reset_Trial_Plots(handles,session,trial)

%
%MotoTrak_Reset_Trial_Plots.m - Vulintus, Inc.
%
%   MOTOTRAK_RESET_TRIAL_PLOTS resets the streaming plots on the MotoTrak
%   GUI at the start of a session or following a completed trial to prepare
%   monitoring for the next trial initiation.
%   
%   UPDATE LOG:
%   05/02/2015 - Drew Sloan - Function first implemented, cutting existing
%       plot reset sections from MotoTrak_Behavior_Loop.m.
%


cla(handles.primary_ax);                                                    %Clear the primary streaming axes.
trial.plot_h = zeros(1,3);                                                  %Pre-allocate a matrix to hold plot handles.
trial.plot_h(1) = area(1:session.buffsize,trial.mon_signal,...
    'linewidth',2,...
    'facecolor',[0.5 0.5 1],...
    'parent',handles.primary_ax);                                           %Make an  areaseries plot.    
set(handles.primary_ax,'xtick',[],'ytick',[]);                              %Get rid of the x- and y-axis ticks.
trial.max_y = [-0.1,1.3]*handles.init;                                      %Calculate y-axis limits based on the trial initiation threshold.
ylim(handles.primary_ax,trial.max_y);                                       %Set the new y-axis limits.
xlim(handles.primary_ax,[1,session.buffsize]);                              %Set the x-axis limits according to the buffersize.
% x = 0.02*session.buffsize;                                                  %Set the x position of the IR signal text.
% y = trial.max_y(2)-0.03*range(trial.max_y);                                 %Set the y position of the IR signal text.
% trial.ir_text = text(x,y,'IR',...
%     'horizontalalignment','left',...
%     'verticalalignment','top',...
%     'margin',2,...
%     'edgecolor','k',...
%     'backgroundcolor','w',...
%     'fontsize',10,...
%     'fontweight','bold',...
%     'parent',handles.primary_ax);                                           %Create text to show the state of the IR signal.
x = 0.97*session.buffsize;                                                  %Set the x position of the clock text.
y = trial.max_y(2)-0.03*range(trial.max_y);                                 %Set the y position of the clock text.
str = sprintf('Session Time: %s', datestr(now - session.start,13));         %Create the text string.
trial.clock_text = text(x,y,str,...
    'horizontalalignment','right',...
    'verticalalignment','top',...
    'margin',2,...
    'edgecolor','k',...
    'backgroundcolor','w',...
    'fontsize',10,...
    'fontweight','bold',...
    'parent',handles.primary_ax);                                           %Create text to show a session timer.

switch lower(handles.device)                                                %Switch between the recognized device types.
    
    case 'both'                                                             %If the user selected combined touch-pull...
        trial.plot_h(3) = area(1:session.buffsize,trial.mon_signal,...
            'linewidth',2,...
            'facecolor',[0.5 1 0.5],...
            'parent',handles.secondary_ax);                                 %Make an initiation areaseries plot.
        line([1,session.buffsize],handles.init*[1,1],...
            'color','k',...
            'linestyle',':',...
            'parent',handles.secondary_ax);                                 %Plot a dotted line to show the threshold.
        text(1,handles.init,' Initiation Threshold',...
            'horizontalalignment','left',...
            'verticalalignment','top',...
            'fontsize',8,...
            'fontweight','bold',...
            'parent',handles.secondary_ax);                                 %Create text to label the the threshold line.        
        trial.max_y = [-1.3,1.3]*handles.init;                              %Calculate y-axis limits based on the trial initiation threshold.
        ylim(handles.secondary_ax,trial.max_y);                             %Set the new y-axis limits.
    
    otherwise                                                               %For all other device types...
        line([1,session.buffsize],handles.init*[1,1],...
            'color','k',...
            'linestyle',':',...
            'parent',handles.primary_ax);                                   %Plot a dotted line to show the threshold.
        text(1,1,' Initiation Threshold',...
            'horizontalalignment','left',...
            'verticalalignment','top',...
            'fontsize',8,...
            'fontweight','bold',...
            'parent',handles.primary_ax);                                   %Create text to label the the threshold line.
        trial.plot_h(3) = area(1:session.buffsize,session.buffer(:,3),...
            'linewidth',2,...
            'facecolor',[1 0.5 0.5],...
            'basevalue',session.minmax_ir(1),...
            'parent',handles.secondary_ax);                                 %Make an areaseries plot for the IR signal on the secondary axes.
        trial.ir_thresh_ln = ...
            line([1,session.buffsize],[1,1]*session.minmax_ir(3),...
            'color','k',...
            'linestyle',':',...
            'parent',handles.secondary_ax);                                 %Plot a dotted line to show the current IR threshold.
        trial.ir_thresh_txt = ...
            text(1,session.minmax_ir(3),' Initiation Threshold',...
            'horizontalalignment','left',...
            'verticalalignment','top',...
            'fontsize',8,...
            'fontweight','bold',...
            'parent',handles.secondary_ax);                                 %Create text to label the the threshold line.
        temp = session.minmax_ir(1:2);                                      %Grab the current historical minimum and maximum.
        if temp(1) > temp(2)                                                %If the 1st value is greater than the second...
            temp = [0, 1023];                                               %Set the infrared bounds to the maximum possible.
        elseif temp(1) == temp(2)                                           %If the 1st value equals the 2nd...
            temp = temp(1) + [-1,1];                                        %Add one above and below the single value.
        end
        temp = temp + [-0.1,0.1]*(temp(2) - temp(1));                       %Calculate y-axis limits.
        ylim(handles.secondary_ax,temp);                                    %Set the secondary axes y-axis limits.
end
set(handles.secondary_ax,'xtick',[],'ytick',[]);                            %Get rid of the x- y-axis ticks.
xlim(handles.secondary_ax,[1,session.buffsize]);                            %Set the secondary x-axis limits according to the buffersize.